package net.mammothmkiv.testchat.client;

import com.google.common.eventbus.Subscribe;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import net.mammothmkiv.testchat.client.events.ContactListUpdateEvent;
import net.mammothmkiv.testchat.common.events.UserLoginEvent;
import net.mammothmkiv.testchat.common.events.UserLogoutEvent;
import net.mammothmkiv.testchat.common.events.UserMessageEvent;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Created by n.rogovoy on 11/11/2015.
 */
public class GlobalChatForm {
    private JPanel pnMain;
    private JTextArea fChatLog;
    private JButton btnSend;
    private JTextArea fMessage;
    private JList lClientList;
    private JFrame frame;

    public GlobalChatForm() {
        frame = new JFrame("GlobalChatForm");
        frame.setContentPane(pnMain);
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        frame.pack();
        btnSend.addActionListener(this::onBtnSendClick);
    }

    private void onBtnSendClick(ActionEvent e) {
        if (fMessage.getText().trim().length() > 0) {
            ChatCore.getInstance().sendChatMessage(fMessage.getText());
            fMessage.setText("");
        }
    }

    @Subscribe
    public void handleContactListUpdateEvent(ContactListUpdateEvent e) {
        DefaultListModel model = new DefaultListModel();
        lClientList.setModel(model);

        e.contactList.getContacts().forEach((id, descriptor) -> {
            model.addElement(descriptor.nickname);
        });
    }

    @Subscribe
    public void handleUserLoginEvent(UserLoginEvent e) {
        logMessage("User " + e.descriptor.nickname + " (" + e.descriptor.id + ") went online");
    }

    @Subscribe
    public void handleUserLogoutEvent(UserLogoutEvent e) {
        logMessage("User " + e.descriptor.nickname + " (" + e.descriptor.id + ") went offline");
    }

    @Subscribe
    public void handleUserMessageEvent(UserMessageEvent e) {
        logMessage(e.message.text, e.message.sender.nickname);
    }

    public void logMessage(String msg, String sender) {
        SimpleDateFormat dateFormatter = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
        fChatLog.append(String.format("[%1$s] %2$s: %3$s\n", dateFormatter.format(new Date()), sender, msg));
    }

    public void logMessage(String msg) {
        logMessage(msg, "");
    }

    public void dispose() {
        frame.dispose();
    }

    public void show() {
        frame.setVisible(true);
    }

    public void hide() {
        frame.setVisible(false);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        pnMain = new JPanel();
        pnMain.setLayout(new GridLayoutManager(2, 3, new Insets(5, 5, 5, 5), -1, -1));
        pnMain.setMinimumSize(new Dimension(127, 127));
        btnSend = new JButton();
        btnSend.setText("Send");
        pnMain.add(btnSend, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        pnMain.add(scrollPane1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(500, 400), null, 0, false));
        fChatLog = new JTextArea();
        fChatLog.setEditable(false);
        fChatLog.setFont(new Font("Arial", Font.PLAIN, 12));
        fChatLog.setLineWrap(true);
        fChatLog.setText("");
        fChatLog.setWrapStyleWord(true);
        scrollPane1.setViewportView(fChatLog);
        final JScrollPane scrollPane2 = new JScrollPane();
        pnMain.add(scrollPane2, new GridConstraints(0, 2, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(100, -1), null, 0, false));
        lClientList = new JList();
        lClientList.setAutoscrolls(false);
        lClientList.setFont(new Font("Arial", Font.PLAIN, 12));
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        lClientList.setModel(defaultListModel1);
        scrollPane2.setViewportView(lClientList);
        final JScrollPane scrollPane3 = new JScrollPane();
        pnMain.add(scrollPane3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 80), null, 0, false));
        fMessage = new JTextArea();
        fMessage.setFont(new Font("Arial", Font.PLAIN, 12));
        fMessage.setLineWrap(true);
        fMessage.setWrapStyleWord(true);
        scrollPane3.setViewportView(fMessage);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return pnMain;
    }
}
